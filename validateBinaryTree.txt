/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int rootInd=0;
  public TreeNode construct(int start,int end,int[] preorder,HashMap<Integer,Integer> map){
      if(start>end)
        return null;
      TreeNode root=new TreeNode(preorder[rootInd]);
      int index=map.get(preorder[rootInd]);
      rootInd++;
      root.left=construct(start,index-1,preorder,map);
      root.right=construct(index+1,end,preorder,map);
    return root;
  }
  public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> map=new HashMap();
        for(int i=0;i<inorder.length;i++)
            map.put(inorder[i],i);
        int start=0;
        int end=preorder.length-1;
        return construct(start,end,preorder,map);
    }
}
